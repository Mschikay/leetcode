class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        infected = set([])

        def dfs(i):
            infected.add(i)
            num = 1
            connected = graph[i]
            for c in range(len(connected)):
                if c == i or c in infected or connected[c] == 0:
                    continue
                num += dfs(c)
            return num

        initial.sort()
        res = initial[0]
        infectNum = 0
        for i in initial:
            if i not in infected:
                n = dfs(i)
                if n > infectNum:
                    res = i
                    infectNum = n

        return res

'''UNION FIND'''
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        root = [i for i in range(n)]


        def find(x):
            if x != root[x]:
                root[x] = find(root[x])
            return root[x]


        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    root[find(i)] = find(j)

        connected = collections.Counter([find(i) for i in range(n)])
        mal = collections.Counter([find(i) for i in initial])
        
        num, ans = 0, min(initial)
        for i in initial:
            if mal[find(i)] == 1:
                if connected[find(i)] > num:
                    num, ans = connected[find(i)], i
                elif connected[find(i)] == num:
                    ans = min(ans, i)
        return ans